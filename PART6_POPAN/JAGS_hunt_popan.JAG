model{
# priors on psi (time-varying)
for(t in 1:T){
  psi[t] ~ dbeta(pr.psi[t,1], pr.psi[t,2]) # prior on recruitment
} 
# priors on capture (NOTE: constraint ON p[1])
for(t in 1:(T-1)){ # (only T-1 stochastic nodes)
  # stochastic p for 2:T 
  p.rv[t] ~ dbeta(pr.p[t,1], pr.p[t,2]) # prior on p
  # set deterministic nodes to enforce constraint
  p[t+1] <- p.rv[t]
} 
p[1] <- p[2] # make p1 = p2
# priors on survival (NOTE: constraint on final phi)
for(t in 1:(T-2)){
  # stochastic phi for 1:(T-2)
  phi.rv[t] ~ dbeta(pr.phi[t,1], pr.phi[t,2]) # prior on p
  # deterministic nodes to enforce constraint on final phi
  phi[t+1] <- phi.rv[t]
} 
phi[1] <- 1 # fake node (there is no survival between t=0 and t=1)
phi[T] <- phi[T-1] # constrain final phi to equal previous phi
# TRANSITION AND EMISSION MATRICES
for(t in 1:T){
  # HMM TRANSITION MATRIX
  tr[1,1,t] <- 1-psi[t] # unborn to unborn
  tr[2,1,t] <- psi[t]   # unborn to alive
  tr[3,1,t] <- 0     # (illegal)
# FROM alive (col2) to...
  tr[1,2,t] <- 0     # (illegal)
  tr[2,2,t] <- phi[t]   # alive to alive
  tr[3,2,t] <- 1-phi[t] # alive to dead
# FROM dead (col3) to...
  tr[1,3,t] <- 0     # (illegal)
  tr[2,3,t] <- 0     # (illegal)
  tr[3,3,t] <- 1     # dead to dead
  # HMM EMISSION MATRIX
  # state 1: unborn 
  em[1,1,t]<-1 # (100% no capture)
  em[2,1,t]<-0  
# state 2: alive
  em[1,2,t]<-1-p[t]
  em[2,2,t]<-p[t]  
# state 3: dead 
  em[1,3,t]<-1 # (100% no capture)
  em[2,3,t]<-0
}
# HMM LATENT STATE PROCESS: at t=1
for(i in 1:M){
  # initialize first state in z=1
  z[i,1] ~ dcat(tr[,1,1]) 
  # CONDITIONAL LIKELIHOOD: at t=1
  y[i,1] ~ dcat(em[,z[i,1],1]) # conditional capture
  # loop though capture periods > 1
  for(t in 2:T){
     z[i,t] ~ dcat(tr[,z[i,t-1],t]) # z_t | z_t-1
     # CONDITIONAL LIKELIHOOD: for t>1
     y[i,t] ~ dcat(em[,z[i,t],t]) # conditional capture
   } # t
 }# M
# DERIVATIVES: Pop abundance and recruits
for(i in 1:M){
    # check when each individual was born/recruited
    recruit_i[i,1] <- equals(z[i,1],2)
    # check whether an individual was actually alive
    N_i[i,1] <- equals(z[i,1],2)
    for(t in 2:T){
       recruit_i[i,t] <- equals(z[i,t-1],1)*equals(z[i,t],2)
       N_i[i,t] <- equals(z[i,t],2)
    } # t
} # M
for(t in 1:T){
   # tally total population abundance per t
   N[t] <- sum(N_i[1:M,t]) # sum over all individuals
   # tally total recruits per t
   recruits[t] <- sum(recruit_i[1:M,t]) 
}
# Calculate POPAN pent (probability of entry)
cumprob[1] <- psi[1]
for(t in 2:T){  
  cumprob[t] <- psi[t]*prod(1-psi[1:(t-1)]) 
}
cumprob.norm <- sum(cumprob[1:T])
# POPAN Inclusion probabilities
for(t in 1:T){ 
   pent[t] <- cumprob[t]/cumprob.norm 
} #t
# loglike: for WAIC estimation (conditional loglikelkhood, unfortunately)
for(i in 1:N.obs){
  for(t in 1:T){
     llit[i,t] <- logdensity.cat(y[i,t], em[1:E, z[i,t],t])
  } # t primary periods
  lli[i] <- sum(llit[i,1:T])
} # individuals N.obs
}

